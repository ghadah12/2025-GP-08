import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';


class LogOutPage extends StatefulWidget {
  const LogOutPage({super.key});

  static const String routeName = '/logOut';

  @override
  State<LogOutPage> createState() => _LogOutPageState();
}
class _LogOutPageState extends State<LogOutPage> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _nameController = TextEditingController();

  bool isDarkMode = false;
  bool notificationsEnabled = false;

  final currentUser = FirebaseAuth.instance.currentUser;

  @override
  void initState() {
    super.initState();
    fetchUserData();
  }

  Future<void> fetchUserData() async {
    if (currentUser != null) {
      final doc = await FirebaseFirestore.instance
          .collection("Individual")
          .doc(currentUser!.uid)
          .get();

      final data = doc.data();
      if (data != null) {
        _emailController.text = data['email'] ?? '';
        _nameController.text = data['username'] ?? '';
        setState(() {
          isDarkMode = data['isDarkMode'] ?? false;
          notificationsEnabled = data['notifications'] ?? false;
        });
      }
    }
  }

  Future<void> saveChanges() async {
    final email = _emailController.text.trim();
    final name = _nameController.text.trim();

    if (currentUser != null) {
      final uid = currentUser!.uid;

      await FirebaseFirestore.instance.collection("Individual").doc(uid).update({
        'email': email,
        'username': name,
        'isDarkMode': isDarkMode,
        'notifications': notificationsEnabled,
      });

      await currentUser!.updateDisplayName(name);
      await FirebaseAuth.instance.currentUser!.reload();
      final updatedUser = FirebaseAuth.instance.currentUser;
      print(updatedUser?.displayName); // للتأكد أنه انحدث فعلاً

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text("تم حفظ التعديلات بنجاح")),
      );

      // لو تستخدمين Provider أو أي طريقة لتغيير الثيم، سوي setState أو notifyListeners هنا
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: isDarkMode ? Colors.black : const Color(0xFFF2F5F7),
      body: SafeArea(
        child: Column(
          children: [
            Container(
              color: const Color(0xFF9D7D6C),
              padding: const EdgeInsets.symmetric(vertical: 24),
              alignment: Alignment.center,
              child: const CircleAvatar(
                radius: 50,
                backgroundColor: Colors.white,
              ),
            ),
            const SizedBox(height: 16),

            // Container 1: المعلومات الشخصية
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 20),
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Column(
                children: [
                  const Text(
                    'الملف الشخصي',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 20),
                  buildTextField("البريد الإلكتروني", _emailController),
                  const SizedBox(height: 12),
                  buildTextField("اسم المستخدم", _nameController),
                ],
              ),
            ),

            const SizedBox(height: 16),

            // Container 2: الإعدادات
            Container(
              margin: const EdgeInsets.symmetric(horizontal: 20),
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                color: Colors.white,
                borderRadius: BorderRadius.circular(20),
              ),
              child: Column(
                children: [
                  const Text(
                    'الإعدادات',
                    style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                  ),
                  const SizedBox(height: 16),
                  buildSwitchTile("الإشعارات", notificationsEnabled, (value) {
                    setState(() {
                      notificationsEnabled = value;
                    });
                  }),
                  const SizedBox(height: 12),
                  buildSwitchTile("المظهر", isDarkMode, (value) {
                    setState(() {
                      isDarkMode = value;
                      // هنا لو تستخدمين theme provider سوي notifyListeners
                    });
                  }),
                ],
              ),
            ),

            const SizedBox(height: 20),

            ElevatedButton(
              onPressed: saveChanges,
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF9D7D6C),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 16),
              ),
              child: const Text('حفظ'),
            ),

            const SizedBox(height: 12),

            ElevatedButton(
              onPressed: () async {
                await FirebaseAuth.instance.signOut();

                if (!mounted) return;
                Navigator.of(context).pushNamedAndRemoveUntil('/', (route) => false);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF9D7D6C),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(30),
                ),
                padding: const EdgeInsets.symmetric(horizontal: 50, vertical: 16),
              ),
              child: const Text('تسجيل خروج'),
            ),

          ],
        ),
      ),
    );
  }

  Widget buildTextField(String label, TextEditingController controller) {
    return Row(
      children: [
        Expanded(flex: 2, child: Text(label, textAlign: TextAlign.right)),
        const SizedBox(width: 12),
        Expanded(
          flex: 5,
          child: TextField(
            controller: controller,
            decoration: const InputDecoration(
              filled: true,
              fillColor: Color(0xFFE5E8EC),
              border: OutlineInputBorder(borderSide: BorderSide.none),
            ),
            textAlign: TextAlign.right,
          ),
        ),
      ],
    );
  }

  Widget buildSwitchTile(String label, bool value, Function(bool) onChanged) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(label, textAlign: TextAlign.right),
        Switch(
          value: value,
          onChanged: onChanged,
          activeColor: const Color(0xFF9D7D6C),
        ),
      ],
    );
  }
}
